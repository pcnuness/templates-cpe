apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: provisionar-addons-gitops-1
  title: Criar estrutura GitOps com Add-ons - 1
  description: Criação de estrutura GitOps com escolha de Add-ons para clusters Kubernetes
spec:
  owner: gitops-plataform
  type: service

  parameters:
    - title: Parâmetros da estrutura
      required: [projectName, owner]
      properties:
        projectName:
          title: Nome do Repositório
          type: string
          default: gitops-cluster
        owner:
          title: Organização ou Usuário GitHub
          type: string
          default: pcnuness
    - title: Selecione Addons
      type: object
      properties:
        aws-alb-controller:
          type: boolean
          title: Incluir AWS-Load-Balancer-Controller
          default: false
        ingressNginx:
          type: boolean
          title: Incluir Ingress-Nginx
          default: true
        crossplane:
          type: boolean
          title: Incluir Crossplane (Provisionamento de Infraestrutura)
          default: false
        keda:
          type: boolean
          title: Incluir KEDA (Escalonamento baseado em Eventos)
          default: false
        karpenter:
          type: boolean
          title: Incluir Karpenter (Autoscaling de Nodes)
          default: false
        kube-prometheus-stack:
          type: boolean
          title: Incluir Kube-Prometheus-Stack (Monitoramento)
          default: false

  steps:
    - id: fetch-base
      name: Buscar estrutura base
      action: fetch:template
      input:
        url: ./templates/cluster-management
        targetPath: .
        values:
          projectName: ${{ parameters.projectName }}
          owner: ${{ parameters.owner }}

    - id: alb-controller
      name: Gerar AWS ALB Controller
      action: fetch:template
      when: ${{ parameters['aws-alb-controller'] }}
      input:
        url: ./templates/addons/aws/aws-load-balancer-controller
        targetPath: ./cluster-management/bootstraps/control-plane/addons/aws/
        values:
          projectName: ${{ parameters.projectName }}

    - id: ingress-nginx
      name: Gerar Ingress NGINX
      action: fetch:template
      when: ${{ parameters.ingressNginx }}
      input:
        url: ./templates/addons/oss/ingress-nginx
        targetPath: ./cluster-management/bootstraps/control-plane/addons/oss/
        values:
          projectName: ${{ parameters.projectName }}

    - id: push-initial
      name: Push Inicial
      action: publish:github
      input:
        repoUrl: "github.com?owner=${{ parameters.owner }}&repo=${{ parameters.projectName }}"
        branch: main
        defaultBranch: main
        repoVisibility: public
        committerName: "Backstage Scaffolder"
        committerEmail: "scaffolder@mydomain.com"
        authorName: "Backstage Scaffolder"
        authorEmail: "scaffolder@mydomain.com"
        commitMessage: "Initial commit from Scaffolder"
        files:
          - source: "."
            target: "/"

  output:
    links:
      - title: Repositório GitHub
        url: "https://github.com/${{ parameters.owner }}/${{ parameters.projectName }}"