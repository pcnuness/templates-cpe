apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: cloudfront-s3-gitlab
  title: Provisionamento de CloudFront com S3 (GitLab)
  description: Cria projeto no GitLab, provisiona bucket S3 e distribuição CloudFront via CloudFormation
spec:
  owner: engineering
  type: service
  parameters:
    - title: Dados do Projeto
      required: [projectName, groupOwner]
      properties:
        projectName:
          title: Nome do Projeto
          type: string
          default: cloudfront-s3-repo
        groupOwner:
          title: Grupo ou Usuário (namespace)
          type: string
          default: pcnuness
    - title: Configuração da Infraestrutura AWS
      required: [bucketName, acmCertificateArn, cloudFrontAlias]
      properties:
        bucketName:
          title: Nome do Bucket S3
          type: string
          default: meu-bucket-cloudfront
        acmCertificateArn:
          title: ARN do Certificado SSL no ACM
          type: string
          default: arn:aws:acm:us-east-1:123456789012:certificate/abcde-12345
        cloudFrontAlias:
          title: Domínio do CloudFront
          type: string
          default: cloudfront.example.com
    - title: Repositório da Infraestrutura
      required: [repoUrl]
      properties:
        repoUrl:
          title: Repository
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - gitlab.com
            # Se quiser restringir o "owner" (namespace) que pode ser usado
            allowedOwners:
              - pcnuness
  steps:
    # 2) Copiar arquivos base para o workspace local
    - id: fetch-template
      name: Aplicar template (CloudFront + S3)
      action: fetch:template
      input:
        targetPath: "."
        url: "./templates"
        values:
          projectName: ${{ parameters.projectName }}
          groupOwner: ${{ parameters.groupOwner }}
          bucketName: ${{ parameters.bucketName }}
          acmCertificateArn: ${{ parameters.acmCertificateArn }}
          cloudFrontAlias: ${{ parameters.cloudFrontAlias }}

    # 3) Fazer o push inicial (commit) no projeto (branch main)
    - id: push-initial
      name: Push Inicial
      action: publish:gitlab
      input:
        repoUrl: ${{ parameters.groupOwner }}&repo=${{ parameters.projectName }}"
        branch: main
        defaultBranch: main
        committerName: "Backstage Scaffolder"
        committerEmail: "scaffolder@mydomain.com"
        authorName: "Backstage Scaffolder"
        authorEmail: "scaffolder@mydomain.com"
        commitMessage: "Initial commit from Scaffolder"
        files:
          - source: "."
            target: "/"

    # 4) Criar Merge Request (opcional) a partir de outra branch
    - id: create_mr
      name: Criar Merge Request
      action: publish:gitlab:merge-request
      input:
        allowedHosts: ['gitlab.com']
        # Formato: gitlab.com?owner=OWNER&repo=PROJECT
        repoUrl: "gitlab.com?owner=${{ parameters.groupOwner }}&repo=${{ parameters.projectName }}"
        sourcePath: "."
        targetPath: "./"
        description: "Código para provisionar CloudFront e S3 para o projeto ${{ parameters.projectName }}"
        title: "feat: ${{ parameters.projectName }} - provisionamento CloudFront + S3"
        branchName: "feat-${{ parameters.projectName }}"
  output:
    links:
      - title: Projeto GitLab
        url: "${{ steps.create_mr.output.remoteUrl }}"
        text: "Merge Request criado"