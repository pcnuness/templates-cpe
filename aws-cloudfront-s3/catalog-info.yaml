apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: cloudfront-s3
  title: Provisionamento de CloudFront com S3
  description: Cria repositório, provisiona bucket S3 e distribuição CloudFront via CloudFormation
spec:
  owner: engineering
  type: service
  parameters:
    - title: Dados do Repositório
      required: [repoName, projectOwner]
      properties:
        repoName:
          title: Nome do Repositório
          type: string
          default: cloudfront-s3-repo
        projectOwner:
          title: Dono do Projeto
          type: string
          default: pcnuness
    - title: Configuração da Infraestrutura AWS
      required: [bucketName, acmCertificateArn, cloudFrontAlias]
      properties:
        bucketName:
          title: Nome do Bucket S3
          type: string
          default: meu-bucket-cloudfront
        acmCertificateArn:
          title: ARN do Certificado SSL no ACM
          type: string
          default: arn:aws:acm:us-east-1:123456789012:certificate/abcde-12345
        cloudFrontAlias:
          title: Domínio do CloudFront
          type: string
          default: cloudfront.example.com
    - title: Repositório da Infraestrutura
      required: [repoUrl]
      properties:
        repoUrl:
          title: Repository
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - pcnuness
  steps:
    # 1) Tenta criar o repositório. Se ele já existir, este passo falha, mas não interrompe o pipeline.
    - id: create-repository
      name: Criar Repositório
      action: github:repo:create
      continueOnError: true
      input:
        repoUrl: "github.com?owner=${{ parameters.projectOwner }}&repo=${{ parameters.repoName }}"
        description: "Repositório para provisionamento de CloudFront com S3"
        visibility: public
        defaultBranch: main

    # 2) Aplicar o template apenas se o repositório foi criado com sucesso
    - id: fetch-template
      name: Aplicar template (CloudFront + S3)
      if: '{{ steps.create-repository.status == "completed" }}'
      action: fetch:template
      input:
        targetPath: "."
        url: "./templates"
        values:
          repoName: ${{ parameters.repoName }}
          projectOwner: ${{ parameters.projectOwner }}
          bucketName: ${{ parameters.bucketName }}
          acmCertificateArn: ${{ parameters.acmCertificateArn }}
          cloudFrontAlias: ${{ parameters.cloudFrontAlias }}

    # 3) Push inicial: executa somente se o passo anterior (fetch-template) foi concluído
    - id: push-initial
      name: Push Inicial
      if: '{{ steps.fetch-template.status == "completed" }}'
      action: github:repo:push
      input:
        repoUrl: "github.com?owner=${{ parameters.projectOwner }}&repo=${{ parameters.repoName }}"
        branch: main
        defaultBranch: main
        committerName: "Backstage Scaffolder"
        committerEmail: "scaffolder@mydomain.com"
        authorName: "Backstage Scaffolder"
        authorEmail: "scaffolder@mydomain.com"
        commitMessage: "Initial commit from Scaffolder"
        files:
          - source: "."
            target: "/"

    # 4) Criar Pull Request somente se o push inicial foi bem-sucedido
    - id: create_pr
      name: Criar Pull Request para CloudFront + S3
      if: '{{ steps.push-initial.status == "completed" }}'
      action: publish:github:pull-request
      input:
        allowedHosts: ['github.com']
        repoUrl: "github.com?owner=${{ parameters.projectOwner }}&repo=${{ parameters.repoName }}"
        sourcePath: "."
        targetPath: "./"
        description: "Código para provisionar CloudFront e S3 para o repositório ${{ parameters.repoName }}"
        title: "feat: ${{ parameters.repoName }} - provisionamento CloudFront + S3"
        branchName: "feat-${{ parameters.repoName }}"
  output:
    links:
      - title: Repositório CloudFront + S3
        url: "${{ steps.create_pr.output.remoteUrl }}"
        text: "Pull Request criado"
