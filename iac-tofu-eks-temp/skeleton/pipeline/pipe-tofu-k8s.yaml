name: 'Deploy Infra folder eks-adr-kubernetes'
description: 'Create Resource in AWS using OpenTofu eks-adr-kubernetes'

on:
  workflow_dispatch:
    inputs:
      stage:
        required: true
        default: dev

env:
  WORK_DIR: eks-adr-kubernetes/terraform
  AWS_REGION: us-east-1

jobs:
  #────────────────────────────
  # 1. 🔄 source
  #────────────────────────────
  source:
    runs-on: ubuntu-latest
    outputs:
      account_id: ${{ steps.aws.outputs.account_id }}
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu-version: 1.9.0

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

  #────────────────────────────
  # 2. 🚀 bootstrap
  #────────────────────────────
  bootstrap:
    runs-on: ubuntu-latest
    needs: source
    steps:
      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Criar bucket do backend se não existir
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          BUCKET="${ACCOUNT_ID}-backend-iac-opentofu"
          echo "bucket_name=$BUCKET" >> $GITHUB_ENV
          REGION="${{ env.AWS_REGION }}"

          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "✅ Bucket $BUCKET já existe"
          else
            echo "🚀 Criando bucket $BUCKET"
            if [ "$REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET"
            else
              aws s3api create-bucket \
                --bucket "$BUCKET" \
                --region "$REGION" \
                --create-bucket-configuration LocationConstraint="$REGION"
            fi
          fi

  #────────────────────────────
  # 3. 🧹 lint
  #────────────────────────────
  lint:
    runs-on: ubuntu-latest
    needs: bootstrap
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Inicializar backend S3
        run: |
          set -euo pipefail
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          BUCKET="$ACCOUNT_ID-backend-iac-opentofu"
          KEY_PATH="${{ github.repository }}/eks-adr-kubernetes/terraform/terraform.tfstate"

          echo "Bucket: $BUCKET"
          echo "Key: $KEY_PATH"
          echo "Region: ${{ env.AWS_REGION }}"

          tofu init \
            -backend-config="bucket=$BUCKET" \
            -backend-config="key=$KEY_PATH" \
            -backend-config="region=${{ env.AWS_REGION }}"
        working-directory: ${{ env.WORK_DIR }}

      - name: Instalar TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          echo "$HOME/.tflint/bin" >> $GITHUB_PATH

      - name: Rodar TFLint
        run: tflint --recursive --var-file=./environments/${{ github.event.inputs.stage }}.tfvars
        working-directory: ${{ env.WORK_DIR }}
        continue-on-error: true

      - name: tofu fmt
        run: tofu fmt -check
        continue-on-error: true
        working-directory: ${{ env.WORK_DIR }}

      - name: tofu validate
        run: tofu validate -no-color
        working-directory: ${{ env.WORK_DIR }}

  #────────────────────────────
  # 4. 🔐 iac-security
  #────────────────────────────
  iac-security:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Instalar Checkov
        run: pip install checkov

      - name: Rodar Checkov
        run: |
          checkov -d . \
            --framework terraform \
            --quiet \
            --var-file environments/${{ github.event.inputs.stage }}.tfvars
        working-directory: ${{ env.WORK_DIR }}
        continue-on-error: true

  #────────────────────────────
  # 5. 💰 finops-analysis
  #────────────────────────────
#  finops-analysis:
#    runs-on: ubuntu-latest
#    needs: iac-security
#    steps:
#      - name: Checkout código
#        uses: actions/checkout@v3
#
#      - name: Setup OpenTofu
#        uses: opentofu/setup-opentofu@v1
#        
#      - name: Configurar credenciais AWS
#        uses: aws-actions/configure-aws-credentials@v2
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Instalar Infracost
#        run: |
#          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
#          echo "$HOME/.infracost/bin" >> $GITHUB_PATH
#
#      - name: Inicializar backend S3
#        run: |
#          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
#          BUCKET="$ACCOUNT_ID-backend-iac-opentofu"
#          KEY_PATH="${{ github.repository }}/eks-adr-kubernetes/terraform/terraform.tfstate"
#
#          echo "Bucket: $BUCKET"
#          echo "Key: $KEY_PATH"
#          echo "Region: ${{ env.AWS_REGION }}"
#
#          tofu init \
#            -backend-config="bucket=$BUCKET" \
#            -backend-config="key=$KEY_PATH" \
#            -backend-config="region=${{ env.AWS_REGION }}"
#        working-directory: ${{ env.WORK_DIR }}
#
#      - name: Rodar Infracost offline
#        run: |
#          infracost breakdown \
#            --path=. \
#            --terraform-var-file="environments/${{ github.event.inputs.stage }}.tfvars" \
#            --format table \
#            --out-file infracost.txt \
#            --no-color \
#            --no-cache
#        working-directory: ${{ env.WORK_DIR }}
#        continue-on-error: true
#
#      - name: Publicar custo no resumo
#        run: |
#          echo "### 💰 Estimativa de custo (Infracost - Offline)" >> $GITHUB_STEP_SUMMARY
#          cat infracost.txt >> $GITHUB_STEP_SUMMARY
#        working-directory: ${{ env.WORK_DIR }}
#        continue-on-error: true

  #────────────────────────────
  # 6. 📦 provision
  #────────────────────────────
  provision:
    runs-on: ubuntu-latest
    #needs: finops-analysis
    needs: iac-security
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu-version: 1.9.0

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Inicializar backend S3
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          BUCKET="$ACCOUNT_ID-backend-iac-opentofu"
          KEY_PATH="${{ github.repository }}/eks-adr-kubernetes/terraform/terraform.tfstate"

          echo "Bucket: $BUCKET"
          echo "Key: $KEY_PATH"
          echo "Region: ${{ env.AWS_REGION }}"

          tofu init \
            -backend-config="bucket=$BUCKET" \
            -backend-config="key=$KEY_PATH" \
            -backend-config="region=${{ env.AWS_REGION }}"
        working-directory: ${{ env.WORK_DIR }}

      - name: tofu plan
        run: |
          tofu plan -var-file="environments/${{ github.event.inputs.stage }}.tfvars" -out=tfplan -compact-warnings
        working-directory: ${{ env.WORK_DIR }}

      - name: tofu apply
        run: tofu apply -auto-approve tfplan
        working-directory: ${{ env.WORK_DIR }}